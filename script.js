// نظام إدارة المبيعات - JavaScriptdocument.addEventListener('DOMContentLoaded', function() {    // العناصر الرئيسية    const sections = {        products: document.getElementById('productsSection'),        sales: document.getElementById('salesSection'),        customers: document.getElementById('customersSection'),        reports: document.getElementById('reportsSection')    };        // أزرار التبويب    document.getElementById('productsTab').addEventListener('click', () => showSection('products'));    document.getElementById('salesTab').addEventListener('click', () => showSection('sales'));    document.getElementById('customersTab').addEventListener('click', () => showSection('customers'));    document.getElementById('reportsTab').addEventListener('click', () => showSection('reports'));        // عرض القسم المحدد    function showSection(sectionName) {        Object.values(sections).forEach(section => section.classList.remove('active'));        sections[sectionName].classList.add('active');                // عند عرض قسم التقارير، قم بتحديث البيانات        if (sectionName === 'reports') {            generateReport();        }    }        // تهيئة البيانات إذا لم تكن موجودة    function initData() {        if (!localStorage.getItem('products')) {            localStorage.setItem('products', JSON.stringify([]));        }                if (!localStorage.getItem('sales')) {            localStorage.setItem('sales', JSON.stringify([]));        }                if (!localStorage.getItem('customers')) {            localStorage.setItem('customers', JSON.stringify([]));        }    }        // المنتجات    const productForm = document.getElementById('addProduct');    const productsTable = document.getElementById('productsList');        // العملاء    const customerForm = document.getElementById('addCustomer');    const customersTable = document.getElementById('customersList');        // المبيعات    const saleForm = document.getElementById('addSale');    const salesTable = document.getElementById('salesList');    const saleProductSelect = document.getElementById('saleProduct');    const saleCustomerSelect = document.getElementById('saleCustomer');        // النموذج المعدل    const modal = document.getElementById('editModal');    const modalContent = document.getElementById('modalContent');    const closeModal = document.querySelector('.close');        // تهيئة التطبيق    initData();    loadProducts();    loadCustomers();    loadSales();    populateProductSelect();    populateCustomerSelect();        // إضافة منتج جديد    productForm.addEventListener('click', addProduct);        // إضافة عميل جديد    customerForm.addEventListener('click', addCustomer);        // تسجيل عملية بيع    saleForm.addEventListener('click', addSale);        // إغلاق النموذج المعدل    closeModal.addEventListener('click', () => modal.style.display = 'none');    window.addEventListener('click', (e) => {        if (e.target === modal) {            modal.style.display = 'none';        }    });        // توليد التقرير    document.getElementById('generateReport').addEventListener('click', generateReport);        // ========== وظائف المنتجات ==========    function loadProducts() {        const products = JSON.parse(localStorage.getItem('products'));        productsTable.innerHTML = '';                products.forEach(product => {            const row = document.createElement('tr');            row.innerHTML = `                <td>${product.id}</td>                <td>${product.name}</td>                <td>${product.price}</td>                <td>${product.quantity}</td>                <td>                    <button class="action-btn edit-btn" data-id="${product.id}">تعديل</button>                    <button class="action-btn delete-btn" data-id="${product.id}">حذف</button>                </td>            `;            productsTable.appendChild(row);        });                // إضافة معالجات الأحداث للأزرار        document.querySelectorAll('.edit-btn').forEach(btn => {            btn.addEventListener('click', () => editProduct(btn.dataset.id));        });                document.querySelectorAll('.delete-btn').forEach(btn => {            btn.addEventListener('click', () => deleteProduct(btn.dataset.id));        });    }        function addProduct() {        const name = document.getElementById('productName').value;        const price = document.getElementById('productPrice').value;        const quantity = document.getElementById('productQuantity').value;                if (!name || !price || !quantity) {            alert('الرجاء ملء جميع الحقول');            return;        }                const products = JSON.parse(localStorage.getItem('products'));        const newProduct = {            id: Date.now(),            name,            price: parseFloat(price),            quantity: parseInt(quantity)        };                products.push(newProduct);        localStorage.setItem('products', JSON.stringify(products));                // تحديث الواجهة        loadProducts();        populateProductSelect();                // مسح حقول الإدخال        document.getElementById('productName').value = '';        document.getElementById('productPrice').value = '';        document.getElementById('productQuantity').value = '';    }        function editProduct(id) {        const products = JSON.parse(localStorage.getItem('products'));        const product = products.find(p => p.id === parseInt(id));                if (!product) return;                modalContent.innerHTML = `            <h3>تعديل المنتج</h3>            <div class="form-group">                <input type="text" id="editProductName" value="${product.name}" placeholder="اسم المنتج">                <input type="number" id="editProductPrice" value="${product.price}" placeholder="السعر">                <input type="number" id="editProductQuantity" value="${product.quantity}" placeholder="الكمية">                <button id="saveProductEdit" data-id="${product.id}">حفظ التعديلات</button>            </div>        `;                modal.style.display = 'block';                document.getElementById('saveProductEdit').addEventListener('click', () => {            const newName = document.getElementById('editProductName').value;            const newPrice = document.getElementById('editProductPrice').value;            const newQuantity = document.getElementById('editProductQuantity').value;                        if (!newName || !newPrice || !newQuantity) {                alert('الرجاء ملء جميع الحقول');                return;            }                        product.name = newName;            product.price = parseFloat(newPrice);            product.quantity = parseInt(newQuantity);                        localStorage.setItem('products', JSON.stringify(products));            loadProducts();            populateProductSelect();            modal.style.display = 'none';        });    }        function deleteProduct(id) {        if (!confirm('هل أنت متأكد من حذف هذا المنتج؟')) return;                const products = JSON.parse(localStorage.getItem('products'));        const filteredProducts = products.filter(p => p.id !== parseInt(id));                localStorage.setItem('products', JSON.stringify(filteredProducts));        loadProducts();        populateProductSelect();    }        function populateProductSelect() {        const products = JSON.parse(localStorage.getItem('products'));        saleProductSelect.innerHTML = '<option value="">اختر منتج</option>';                products.forEach(product => {            const option = document.createElement('option');            option.value = product.id;            option.textContent = `${product.name} (${product.price} ريال) - الكمية: ${product.quantity}`;            saleProductSelect.appendChild(option);        });    }        // ========== وظائف العملاء ==========    function loadCustomers() {        const customers = JSON.parse(localStorage.getItem('customers'));        customersTable.innerHTML = '';                customers.forEach(customer => {            const row = document.createElement('tr');            row.innerHTML = `                <td>${customer.id}</td>                <td>${customer.name}</td>                <td>${customer.phone}</td>                <td>${customer.email}</td>                <td>                    <button class="action-btn edit-btn" data-id="${customer.id}">تعديل</button>                    <button class="action-btn delete-btn" data-id="${customer.id}">حذف</button>                </td>            `;            customersTable.appendChild(row);        });                // إضافة معالجات الأحداث للأزرار        document.querySelectorAll('.edit-btn').forEach(btn => {            btn.addEventListener('click', () => editCustomer(btn.dataset.id));        });                document.querySelectorAll('.delete-btn').forEach(btn => {            btn.addEventListener('click', () => deleteCustomer(btn.dataset.id));        });    }        function addCustomer() {        const name = document.getElementById('customerName').value;        const phone = document.getElementById('customerPhone').value;        const email = document.getElementById('customerEmail').value;                if (!name || !phone) {            alert('الرجاء إدخال اسم العميل ورقم الهاتف');            return;        }                const customers = JSON.parse(localStorage.getItem('customers'));        const newCustomer = {            id: Date.now(),            name,            phone,            email: email || 'N/A'        };                customers.push(newCustomer);        localStorage.setItem('customers', JSON.stringify(customers));                // تحديث الواجهة        loadCustomers();        populateCustomerSelect();                // مسح حقول الإدخال        document.getElementById('customerName').value = '';        document.getElementById('customerPhone').value = '';        document.getElementById('customerEmail').value = '';    }        function editCustomer(id) {        const customers = JSON.parse(localStorage.getItem('customers'));        const customer = customers.find(c => c.id === parseInt(id));                if (!customer) return;                modalContent.innerHTML = `            <h3>تعديل بيانات العميل</h3>            <div class="form-group">                <input type="text" id="editCustomerName" value="${customer.name}" placeholder="اسم العميل">                <input type="text" id="editCustomerPhone" value="${customer.phone}" placeholder="الهاتف">                <input type="email" id="editCustomerEmail" value="${customer.email}" placeholder="البريد الإلكتروني">                <button id="saveCustomerEdit" data-id="${customer.id}">حفظ التعديلات</button>            </div>        `;                modal.style.display = 'block';                document.getElementById('saveCustomerEdit').addEventListener('click', () => {            const newName = document.getElementById('editCustomerName').value;            const newPhone = document.getElementById('editCustomerPhone').value;            const newEmail = document.getElementById('editCustomerEmail').value;                        if (!newName || !newPhone) {                alert('الرجاء إدخال اسم العميل ورقم الهاتف');                return;            }                        customer.name = newName;            customer.phone = newPhone;            customer.email = newEmail || 'N/A';                        localStorage.setItem('customers', JSON.stringify(customers));            loadCustomers();            populateCustomerSelect();            modal.style.display = 'none';        });    }        function deleteCustomer(id) {        if (!confirm('هل أنت متأكد من حذف هذا العميل؟')) return;                const customers = JSON.parse(localStorage.getItem('customers'));        const filteredCustomers = customers.filter(c => c.id !== parseInt(id));                localStorage.setItem('customers', JSON.stringify(filteredCustomers));        loadCustomers();        populateCustomerSelect();    }        function populateCustomerSelect() {        const customers = JSON.parse(localStorage.getItem('customers'));        saleCustomerSelect.innerHTML = '<option value="">اختر عميل</option>';                customers.forEach(customer => {            const option = document.createElement('option');            option.value = customer.id;            option.textContent = `${customer.name} (${customer.phone})`;            saleCustomerSelect.appendChild(option);        });    }        // ========== وظائف المبيعات ==========    function loadSales() {        const sales = JSON.parse(localStorage.getItem('sales'));        salesTable.innerHTML = '';                sales.forEach(sale => {            const product = getProductById(sale.productId);            const customer = getCustomerById(sale.customerId);                        const row = document.createElement('tr');            row.innerHTML = `                <td>${sale.id}</td>                <td>${product ? product.name : 'منتج محذوف'}</td>                <td>${sale.quantity}</td>                <td>${product ? product.price : '0'}</td>                <td>${product ? (product.price * sale.quantity).toFixed(2) : '0'}</td>                <td>${customer ? customer.name : 'عميل محذوف'}</td>                <td>${new Date(sale.date).toLocaleDateString()}</td>                <td>                    <button class="action-btn delete-btn" data-id="${sale.id}">حذف</button>                </td>            `;            salesTable.appendChild(row);        });                // إضافة معالجات الأحداث لأزرار الحذف        document.querySelectorAll('.delete-btn').forEach(btn => {            btn.addEventListener('click', () => deleteSale(btn.dataset.id));        });    }        function addSale() {        const productId = saleProductSelect.value;        const quantity = document.getElementById('saleQuantity').value;        const customerId = saleCustomerSelect.value;                if (!productId || !quantity || !customerId) {            alert('الرجاء اختيار منتج وكمية وعميل');            return;        }                const products = JSON.parse(localStorage.getItem('products'));        const product = products.find(p => p.id === parseInt(productId));                if (!product) {            alert('المنتج المحدد غير موجود');            return;        }                if (parseInt(quantity) > product.quantity) {            alert('الكمية المطلوبة غير متوفرة في المخزون');            return;        }                // تحديث كمية المنتج        product.quantity -= parseInt(quantity);        localStorage.setItem('products', JSON.stringify(products));                // إضافة عملية البيع        const sales = JSON.parse(localStorage.getItem('sales'));        const newSale = {            id: Date.now(),            productId: parseInt(productId),            customerId: parseInt(customerId),            quantity: parseInt(quantity),            date: new Date().toISOString()        };                sales.push(newSale);        localStorage.setItem('sales', JSON.stringify(sales));                // تحديث الواجهة        loadSales();        loadProducts();        populateProductSelect();                // مسح حقول الإدخال        saleProductSelect.value = '';        document.getElementById('saleQuantity').value = '';        saleCustomerSelect.value = '';    }        function deleteSale(id) {        if (!confirm('هل أنت متأكد من حذف هذه العملية؟')) return;                const sales = JSON.parse(localStorage.getItem('sales'));        const sale = sales.find(s => s.id === parseInt(id));                if (!sale) return;                // استعادة كمية المنتج        const products = JSON.parse(localStorage.getItem('products'));        const product = products.find(p => p.id === sale.productId);                if (product) {            product.quantity += sale.quantity;            localStorage.setItem('products', JSON.stringify(products));        }                // حذف عملية البيع        const filteredSales = sales.filter(s => s.id !== parseInt(id));        localStorage.setItem('sales', JSON.stringify(filteredSales));                // تحديث الواجهة        loadSales();        loadProducts();        populateProductSelect();    }        // ========== وظائف التقارير ==========    function generateReport() {        const startDate = document.getElementById('reportStartDate').value;        const endDate = document.getElementById('reportEndDate').value;                let sales = JSON.parse(localStorage.getItem('sales'));                // تصفية المبيعات حسب التاريخ إذا تم تحديده        if (startDate && endDate) {            const start = new Date(startDate);            const end = new Date(endDate);                        sales = sales.filter(sale => {                const saleDate = new Date(sale.date);                return saleDate >= start && saleDate <= end;            });        }                // حساب إجمالي المبيعات وعدد المعاملات        let totalAmount = 0;        let transactionCount = sales.length;                sales.forEach(sale => {            const product = getProductById(sale.productId);            if (product) {                totalAmount += product.price * sale.quantity;            }        });                // تحديث واجهة التقارير        document.getElementById('totalSalesAmount').textContent = totalAmount.toFixed(2) + ' ريال';        document.getElementById('totalTransactions').textContent = transactionCount;                // حساب أفضل المنتجات مبيعاً        const productSales = {};                sales.forEach(sale => {            const product = getProductById(sale.productId);            if (product) {                if (!productSales[product.id]) {                    productSales[product.id] = {                        name: product.name,                        quantity: 0                    };                }                productSales[product.id].quantity += sale.quantity;            }        });                const topProductsList = document.getElementById('topProducts');        topProductsList.innerHTML = '';                // تحويل إلى مصفوفة وترتيب تنازلي        const sortedProducts = Object.values(productSales).sort((a, b) => b.quantity - a.quantity).slice(0, 5);                sortedProducts.forEach(product => {            const li = document.createElement('li');            li.textContent = `${product.name}: ${product.quantity} وحدة`;            topProductsList.appendChild(li);        });                // إنشاء الرسم البياني        createSalesChart(sales);    }        function createSalesChart(sales) {        const ctx = document.getElementById('salesChart').getContext('2d');                // تجميع المبيعات حسب التاريخ        const salesByDate = {};                sales.forEach(sale => {            const date = new Date(sale.date).toLocaleDateString();            const product = getProductById(sale.productId);                        if (product) {                if (!salesByDate[date]) {                    salesByDate[date] = 0;                }                salesByDate[date] += product.price * sale.quantity;            }        });                const dates = Object.keys(salesByDate);        const amounts = Object.values(salesByDate);                // إذا كان هناك مخطط موجود، قم بتدميره أولاً        if (window.salesChart) {            window.salesChart.destroy();        }                window.salesChart = new Chart(ctx, {            type: 'bar',            data: {                labels: dates,                datasets: [{                    label: 'المبيعات بالريال',                    data: amounts,                    backgroundColor: 'rgba(54, 162, 235, 0.5)',                    borderColor: 'rgba(54, 162, 235, 1)',                    borderWidth: 1                }]            },            options: {                responsive: true,                scales: {                    y: {                        beginAtZero: true                    }                }            }        });    }        // ========== وظائف مساعدة ==========    function getProductById(id) {        const products = JSON.parse(localStorage.getItem('products'));        return products.find(p => p.id === parseInt(id));    }        function getCustomerById(id) {        const customers = JSON.parse(localStorage.getItem('customers'));        return customers.find(c => c.id === parseInt(id));    }});